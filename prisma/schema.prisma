// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Define the User model
model User {
  userId    String    @id
  password  String
  bookings  Booking[]
}

model Booking {
  bookingId      String         @id @default(uuid())
  user           User           @relation(fields: [userId], references: [userId])
  userId         String
  service        Service        @relation(fields: [serviceId], references: [serviceId])
  serviceId      String         
  bookingDate    DateTime       @default(now())
  contactPersonName String
  contactPersonNumber String
  contactPersonEmail String
  specialRequests String?
  bookingMember  BookingMember[]
  type           String
  quotation      Quotation?
  payment        Payment?       
  status         String         @default("Pending")
}

model Quotation {
  quotationId    String         @id @default(uuid())
  service        Service        @relation(fields: [serviceId], references: [serviceId])
  serviceId      String
  description    String
  totalPrice     Float
  totalTax       Float
  totalDiscount  Float
  booking        Booking?       @relation(fields: [bookingId], references: [bookingId])
  bookingId      String?        @unique
  quotationItems QuotationItem[]
  quotationInclusions QuotationInclusion[]
  quoationExclusions QuotationExclusion[]
}

model QuotationInclusion {
  inclusionId    Int          @id @default(autoincrement())
  quotation      Quotation    @relation(fields: [quotationId], references: [quotationId])
  quotationId    String
  inclusion      String
}

model QuotationExclusion {
  exclusionId    Int          @id @default(autoincrement())
  quotation      Quotation    @relation(fields: [quotationId], references: [quotationId])
  quotationId    String
  exclusion      String
}
model QuotationItem {
  itemId         Int          @id @default(autoincrement())
  itemName       String
  itemPrice      Float
  itemDescription String
  quotation      Quotation    @relation(fields: [quotationId], references: [quotationId])
  quotationId    String
}

model Payment {
  paymentId      String        @id @default(uuid())
  booking        Booking       @relation(fields: [bookingId], references: [bookingId])
  bookingId      String        @unique
  // Fields necessary for Stripe payment
  amount         Float
  currency       String
  description    String
  status         String
}

model BookingMember {
  memberId       Int          @id @default(autoincrement())
  booking        Booking      @relation(fields: [bookingId], references: [bookingId])
  bookingId      String
  lastName       String
  firstName      String
  middleName     String?
  contactNumber  String
  email          String
  requirement    BookingMemberRequirements @relation(fields: [requirementId], references: [id])
  requirementId  Int         @unique
}

model BookingMemberRequirements {
  id             Int          @id @default(autoincrement())
  bookingMember  BookingMember?
  validId        String?
  passportBioData String?
  passportIdPicture String?
  newPassport   String?
  oldPassport   String?
  birthCertificate String?
  marriageCertificate String?
  bankCertificate String?
  bankStatement String?
  employementCertificate String?
  incomeTaxReturn String?
  businessPermit String?
  itinerary      String?
  roundTripTicket String?
  hotelReservation String?
  prcCard        String?
  bdoCard        String?
  travelInsurance String?
  sssProof       String?
  realEstateTitle String?
  certificateOfAbsence String?
  twoByTwoPicture String?
  invitationLetter String?
  dswdCertification String?
}


model Service {
  serviceId     String          @id @default(uuid())
  name          String
  description   String
  bookings      Booking[]
  quotations    Quotation[]
}





// Define the Tour model
model Tour {
  tourId          Int          @id @default(autoincrement())
  tourName        String
  tourContinent   String       // Assuming a tour can belong to only one continent; adjust as needed
  isFeatured      Boolean
  thumbnail       String  
  countries       Country[]
  inclusions      TourInclusions[]
  exclusions      TourExclusions[]
  tourDays        TourDay[]    
  tourImages      TourImages[]
  tourDates       TourDates[]
}

model TourDates {
  id              Int          @id @default(autoincrement())
  tour            Tour         @relation(fields: [tourId], references: [tourId])
  tourId          Int
  tourStartDate   DateTime
  tourEndDate     DateTime
  expiresAt       DateTime
}


model Country {
  countryId       Int          @id @default(autoincrement())
  tour            Tour         @relation(fields: [tourId], references: [tourId])
  tourId          Int
  countryName     String
}

model TourInclusions {
  tourInclusionId Int          @id @default(autoincrement())
  tour            Tour         @relation(fields: [tourId], references: [tourId])
  tourId          Int
  inclusion       String
}

model TourExclusions {
  tourExclusionId Int          @id @default(autoincrement())
  tour            Tour         @relation(fields: [tourId], references: [tourId])
  tourId          Int
  exclusion       String
}

model TourDay {
  tourDayId       Int          @id @default(autoincrement())
  tour            Tour         @relation(fields: [tourId], references: [tourId])
  tourId          Int
  dayNumber       Int
  dayDescription  String
  dayItinerary    DayItinerary[]
}

model TourImages {
  tourImageId     Int          @id @default(autoincrement())
  tour            Tour         @relation(fields: [tourId], references: [tourId])
  tourId          Int
  imageUrl        String
}

model DayItinerary {
  dayItineraryId  Int          @id @default(autoincrement())
  tourDay         TourDay      @relation(fields: [tourDayId], references: [tourDayId])
  tourDayId       Int
  itinerary       String
}

