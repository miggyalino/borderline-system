// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Define the User model
model User {
  userId    String    @id
  password  String
  bookings  Booking[]
}

// Define the Booking model as an abstract type
model Booking {
  bookingId      String         @id @default(uuid())
  user           User           @relation(fields: [userId], references: [userId])
  userId         String
  service        Service        @relation(fields: [serviceId], references: [serviceId])
  serviceId      String         
  bookingDate    DateTime       @default(now())
  contactPersonName String
  contactPersonNumber String
  contactPersonEmail String
  specialRequests String?
  bookingMembers BookingMember[]
  type           String
  quotation      String?
  // For Tour and Customized Tour
  destination   String?
  travelStartDate DateTime?
  travelEndDate DateTime?
  // For admin
  generatedQuotation Boolean @default(false)
  status       String @default("Pending")
}

model Service {
  serviceId     String          @id @default(uuid())
  name          String
  description   String
  bookings      Booking[]
}


// Booking Member model
model BookingMember {
  memberId       Int          @id @default(autoincrement())
  booking        Booking      @relation(fields: [bookingId], references: [bookingId])
  bookingId      String
  lastName       String
  firstName      String
  middleName     String?
  contactNumber  String
  email          String
  BookingMemberRequirements BookingMemberRequirements[]
}

// Include all requirements needed for all services
model BookingMemberRequirements {
  requirementId  Int          @id @default(autoincrement())
  bookingMember  BookingMember @relation(fields: [memberId], references: [memberId])
  memberId       Int
  requirementName    String
  requirementUrl     String
}


// Define the Tour model
model Tour {
  tourId          Int          @id @default(autoincrement())
  tourName        String
  tourStartDate   DateTime
  tourEndDate     DateTime      // You can use a specific type for dates based on your needs (e.g., DateTime)
  tourContinent   String       // Assuming a tour can belong to only one continent; adjust as needed
  isFeatured      Boolean
  thumbnail       String  
  countries     Country[]
  inclusions TourInclusions[]
  exclusions TourExclusions[]
  tourDays        TourDay[]    
  tourImages      TourImages[]
}

model Country {
  countryId       Int          @id @default(autoincrement())
  tour            Tour         @relation(fields: [tourId], references: [tourId])
  tourId          Int
  countryName     String
}

model TourInclusions {
  tourInclusionId Int          @id @default(autoincrement())
  tour            Tour         @relation(fields: [tourId], references: [tourId])
  tourId          Int
  inclusion       String
}

model TourExclusions {
  tourExclusionId Int          @id @default(autoincrement())
  tour            Tour         @relation(fields: [tourId], references: [tourId])
  tourId          Int
  exclusion       String
}

model TourDay {
  tourDayId       Int          @id @default(autoincrement())
  tour            Tour         @relation(fields: [tourId], references: [tourId])
  tourId          Int
  dayNumber       Int
  dayDescription  String
  dayItinerary    DayItinerary[]
}

model TourImages {
  tourImageId     Int          @id @default(autoincrement())
  tour            Tour         @relation(fields: [tourId], references: [tourId])
  tourId          Int
  imageUrl        String
}

model DayItinerary {
  dayItineraryId  Int          @id @default(autoincrement())
  tourDay         TourDay      @relation(fields: [tourDayId], references: [tourDayId])
  tourDayId       Int
  itinerary       String
}

