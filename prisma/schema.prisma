// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Define the User model
model User {
  userId    String    @id
  password  String
  bookings  Booking[]
}

// Define the Booking model as an abstract type
model Booking {
  bookingId      String         @id
  user           User           @relation(fields: [userId], references: [userId])
  userId         String
  bookingDate    DateTime
  bookingMembers BookingMember[]
  // Define a discriminator field to indicate the type of booking
  type           String
}

// Define the specific booking models with inheritance
model TourBooking {
  tourBookingId  String         @id @default(uuid())
  tour           Tour        @relation(fields: [tourId], references: [tourId])
  tourId         Int
  // Define tour-specific fields here
}

model FlightBooking {
  flightBookingId  String         @id @default(uuid())
  flightDetails  String
  // Define flight-specific fields here
}

model PassportAssistanceBooking {
  passportAsssistanceBookingId  String         @id @default(uuid())
  bookingId      String
  // Define passport assistance-specific fields here
}

model VisaAssistanceBooking {
  visaAsssistanceBookingId  String         @id @default(uuid())
  bookingId      String
  // Define visa assistance-specific fields here
}

// Define the BookingMember model
model BookingMember {
  memberId       Int          @id @default(autoincrement())
  booking        Booking      @relation(fields: [bookingId], references: [bookingId])
  bookingId      String
  lastName       String
  firstName      String
  middleName     String?
  contactNumber  String
}

// Define the Tour model
model Tour {
  tourId          Int          @id @default(autoincrement())
  tourName        String
  tourDates       String       // You can use a specific type for dates based on your needs (e.g., DateTime)
  tourItinerary   String
  tourInclusions  String
  tourExclusions  String
  tourContinent   String       // Assuming a tour can belong to only one continent; adjust as needed
  isFeatured      Boolean
  images          TourImage[]  // Represents the images associated with this tour
  bookings        TourBooking[]    // Represents the tour bookings made for this tour
  // members         BookingMember[] // Represents the approved booking members for this tour
}

// Define the TourImage model
model TourImage {
  imageId       Int      @id @default(autoincrement())
  tour          Tour     @relation(fields: [tourId], references: [tourId])
  tourId        Int
  imageUrl      String
}
